// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5znmqm84gAkSmZErs8zBFs
// Component: pgXsmv_vw8hV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { PlasmicHead } from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: dkpkCuny-teH/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";

import { useScreenVariants as useScreenVariantst8IY2McI0Yt } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -t8iY2mcI0YT/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 5znmqm84gAkSmZErs8zBFs/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: pgXsmv_vw8hV/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: inzf9r7ENUEh/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: B7DPSsDz0Gxx/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantst8IY2McI0Yt()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <PlasmicHead
            data-plasmic-name={"pageMetadataOverride"}
            data-plasmic-override={overrides.pageMetadataOverride}
            className={classNames("__wab_instance", sty.pageMetadataOverride)}
            description={
              "In the bustling world of cryptocurrency, there lived a memecoin like no other\u2014IQ50CAT. Unlike its sophisticated counterparts, IQ50CAT was a lovable but incredibly dim-witted cat with an IQ of 50. Despite its lack of intelligence, IQ50CAT had a heart of gold and a spirit as bright as the moon."
            }
            image={"/plasmic/website_starter/images/iq50Catpng.png"}
            title={"IQ50CAT"}
          />

          <div className={classNames(projectcss.all, sty.freeBox__yhWrf)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__l7Q1Y)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__edUC)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"62px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/website_starter/images/iq50Catpng.png",
                  fullWidth: 500,
                  fullHeight: 500,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uf11Y
                )}
              >
                {"IQ50CAT"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dnOxr)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gFy9)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__dJ7YQ)}
                  color={"white"}
                  link={"https://twitter.com/IQ50CATSol"}
                >
                  {"TWITTER"}
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__xKjNk)}
                  color={"white"}
                  link={"https://t.me/iq50catPORTAL"}
                >
                  {"TELEGRAM"}
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__kGyH)}
                  color={"white"}
                >
                  {"DEXSCREENER"}
                </Button>
              </Stack__>
            </Stack__>
          </div>
          <section className={classNames(projectcss.all, sty.section__kHeVv)}>
            <div className={classNames(projectcss.all, sty.freeBox__yy8VU)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sd5Er
                )}
              >
                {"7yZp2XBhWdhigcEUucB7pnei5HuQ9LSBrjanAG2dQvnR"}
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__a8Kgj)}>
            <div className={classNames(projectcss.all, sty.freeBox__oyDy5)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__fzbI0)}
              >
                <div className={classNames(projectcss.all, sty.column__u9MmB)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__cY5Hk)}
                    direction={"left"}
                    triggerOnce={true}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oXkmA)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__onkte)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/iq_50_cat/images/cat34Minpng.png",
                          fullWidth: 1024,
                          fullHeight: 1024,
                          aspectRatio: undefined
                        }}
                      />

                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__wyQtp
                        )}
                      >
                        {"About"}
                      </h1>
                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4___5BBof
                        )}
                      >
                        {
                          "In the bustling world of cryptocurrency, there lived a memecoin like no other\u2014IQ50CAT. Unlike its sophisticated counterparts, IQ50CAT was a lovable but incredibly dim-witted cat with an IQ of 50. Despite its lack of intelligence, IQ50CAT had a heart of gold and a spirit as bright as the moon."
                        }
                      </h4>
                    </div>
                  </Reveal>
                </div>
                <div className={classNames(projectcss.all, sty.column__kOmiN)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__wHlhL)}
                    direction={"right"}
                    triggerOnce={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___64Myc
                      )}
                    >
                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__r76Nn
                        )}
                      >
                        {
                          "One day, IQ50CAT stumbled upon a group of seasoned investors who were discussing the latest trends in the crypto market. Curious but clueless, IQ50CAT decided to join the conversation, hoping to learn a thing or two about the world it inhabited.\n\nTo everyone's surprise, IQ50CAT's innocent questions and bumbling nature brought a sense of joy and levity to the group. Its antics and charming personality quickly won over the hearts of the investors, who dubbed it the \"mascot\" of their community.\n\nAs time went on, IQ50CAT became a symbol of resilience and positivity in the volatile world of cryptocurrency. Despite its low IQ, IQ50CAT's simple wisdom and pure-hearted nature inspired others to embrace the joy of the journey, rather than focusing solely on the destination.\n\nAnd so, IQ50CAT became more than just a memecoin\u2014it became a beacon of hope, reminding everyone that sometimes, in the complex world of finance, a little simplicity and a lot of heart are all you need to succeed."
                        }
                      </h4>
                    </div>
                  </Reveal>
                </div>
              </Stack__>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__gSwNh)}>
            <div className={classNames(projectcss.all, sty.freeBox__lmcVd)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1___7Y0Cj
                )}
              >
                {"Tokenomics"}
              </h1>
              <div className={classNames(projectcss.all, sty.columns__spXwN)}>
                <div className={classNames(projectcss.all, sty.column__plEvT)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__nLxvd)}
                    direction={"left"}
                    triggerOnce={true}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ntGMu)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/website_starter/images/catiq502Png.png",
                        fullWidth: 793,
                        fullHeight: 973,
                        aspectRatio: undefined
                      }}
                    />
                  </Reveal>
                </div>
                <div className={classNames(projectcss.all, sty.column__akDw)}>
                  <Reveal
                    cascade={true}
                    className={classNames("__wab_instance", sty.reveal___7P5O7)}
                    direction={"right"}
                    triggerOnce={true}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__frCJs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tfM22
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xxDoZ
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wwB22
                            )}
                          >
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__vUnbV
                              )}
                            >
                              {"Name"}
                            </h6>
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__utexh
                              )}
                            >
                              {"IQ50CAT"}
                            </h3>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tg84O
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___9NQdR
                            )}
                          >
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6___4HBh5
                              )}
                            >
                              {"Chain"}
                            </h6>
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3___9HmB
                              )}
                            >
                              {"Solana"}
                            </h3>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kc0Se
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vdnL5
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ytYp
                            )}
                          >
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6___1Li7
                              )}
                            >
                              {"Total Supply"}
                            </h6>
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__pelan
                              )}
                            >
                              {"1.000.000.000"}
                            </h3>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ic2A
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__s4KJl
                            )}
                          >
                            <h6
                              className={classNames(
                                projectcss.all,
                                projectcss.h6,
                                projectcss.__wab_text,
                                sty.h6__cA6S5
                              )}
                            >
                              {"CA"}
                            </h6>
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3___6VOy3
                              )}
                            >
                              {
                                "7yZp2XBhWdhig\ncEUucB7pnei5Hu\nQ9LSBrjanAG2d\nQvnR"
                              }
                            </h3>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yczNr
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__f4EjC
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__fHgeM
                            )}
                          >
                            {"MINT REVOKED"}
                          </h3>
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__yktQv
                            )}
                          >
                            {"LPBURN"}
                          </h3>
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__pu0Q
                            )}
                          >
                            {"0% TAX"}
                          </h3>
                        </div>
                      </div>
                    </div>
                  </Reveal>
                </div>
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__eCbS)}>
            <div className={classNames(projectcss.all, sty.freeBox__lpw)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__hYn1S
                )}
              >
                {"ROADMAP"}
              </h1>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__hIb7N)}
              >
                <div className={classNames(projectcss.all, sty.column__gi0Tx)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__xUf9C
                    )}
                  >
                    {"Phase 1"}
                  </h1>
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__fyafy
                    )}
                  >
                    {"Meme and Build TG to 1000 user \nDextools update "}
                  </h3>
                </div>
                <div className={classNames(projectcss.all, sty.column__eUdGr)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__euXih
                    )}
                  >
                    {"Phase 2"}
                  </h1>
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__yNjE
                    )}
                  >
                    {"Vibe and HODL"}
                  </h3>
                </div>
                <div className={classNames(projectcss.all, sty.column___7L6Ng)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__cK92
                    )}
                  >
                    {"Phase 3"}
                  </h1>
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3___2Ju8Q
                    )}
                  >
                    {"Utility Development"}
                  </h3>
                </div>
              </Stack__>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__jAazu)}>
            <div className={classNames(projectcss.all, sty.freeBox__lX5Cc)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__dQvWg
                )}
              >
                {"Community"}
              </h1>
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__fw9Xo
                )}
              >
                {
                  "\nBe part of our journey, where every move counts and every player leads. With $IQ50CAT, it's not just a game, it's a legacy."
                }
              </h3>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1BR5I)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__klXoP)}
                color={"white"}
                link={"https://twitter.com/IQ50CATSol"}
              >
                {"TWITTER"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button___4Qmn8)}
                color={"white"}
                link={"https://t.me/iq50catPORTAL"}
              >
                {"TELEGRAM"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__y9LGu)}
                color={"white"}
              >
                {"DEXSCREENER"}
              </Button>
            </Stack__>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageMetadataOverride"],
  pageMetadataOverride: ["pageMetadataOverride"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageMetadataOverride: typeof PlasmicHead;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "IQ50Cat",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
